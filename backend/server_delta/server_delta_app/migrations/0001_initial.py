# Generated by Django 2.0.5 on 2018-07-09 21:28

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import server_delta_app.managers.user.user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', server_delta_app.managers.user.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerDossierModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpf', models.CharField(max_length=11, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('date_birth', models.DateField()),
                ('address', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'customer_dossier',
            },
        ),
        migrations.CreateModel(
            name='DebtModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('customer_dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debts', to='server_delta_app.CustomerDossierModel')),
            ],
            options={
                'db_table': 'debt',
            },
        ),
        migrations.CreateModel(
            name='FinancialTransactionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(max_length=1000)),
                ('date', models.DateField()),
                ('type_transaction', models.CharField(max_length=100)),
                ('payment_type', models.CharField(max_length=100)),
                ('customer_dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_transactions', to='server_delta_app.CustomerDossierModel')),
            ],
            options={
                'db_table': 'financial_transaction',
            },
        ),
        migrations.CreateModel(
            name='PatrimonyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(max_length=1000)),
                ('customer_dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patrimonies', to='server_delta_app.CustomerDossierModel')),
            ],
            options={
                'db_table': 'patrimony',
            },
        ),
        migrations.CreateModel(
            name='SourceIncomeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(max_length=1000)),
                ('customer_dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources_income', to='server_delta_app.CustomerDossierModel')),
            ],
            options={
                'db_table': 'source_income',
            },
        ),
        migrations.AddIndex(
            model_name='customerdossiermodel',
            index=models.Index(fields=['cpf'], name='cpf_idx'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='usermodel',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
    ]
